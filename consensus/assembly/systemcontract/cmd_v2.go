package systemcontract

import (
	// "bytes"
	// "errors"
	// "github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/consensus/assembly/caller"
	"github.com/ethereum/go-ethereum/core"
	"github.com/ethereum/go-ethereum/core/state"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/log"
	"github.com/ethereum/go-ethereum/params"
	"math"
	"math/big"
	// "sort"
)

const (
	cmdV2Code = "0x608060405234801561001057600080fd5b50600436106101c35760003560e01c80638129fc1c116100f9578063bfd25ce811610097578063cd5c534211610071578063cd5c534214610316578063db78dd281461031e578063efd8d8e214610343578063f26fdb291461034b576101c3565b8063bfd25ce8146102e7578063c7e4b964146102ef578063c967f90f146102f7576101c3565b8063a0e8ff66116100d3578063a0e8ff66146102c7578063a1a7536b146102cf578063b3c77d80146102d7578063be645692146102df576101c3565b80638129fc1c146102af578063817da0fd146102b757806396c7cd67146102bf576101c3565b806330f3f0db116101665780636233be5d116101405780636233be5d1461028f578063667dd61d14610297578063671051481461029f578063811b0b39146102a7576101c3565b806330f3f0db146102625780633a061bd31461027f5780633a73c88114610287576101c3565b8063158ef93e116101a2578063158ef93e1461020e5780631b5e358c1461022a5780631d681516146102325780632faf0e801461023a576101c3565b80627ad093146101c85780630aa01884146101e25780630cc06e2b14610206575b600080fd5b6101d0610353565b60408051918252519081900360200190f35b6101ea610359565b604080516001600160a01b039092168252519081900360200190f35b6101d061035f565b61021661036d565b604080519115158252519081900360200190f35b6101ea610376565b6101d061037c565b6102606004803603602081101561025057600080fd5b50356001600160a01b0316610382565b005b6102606004803603602081101561027857600080fd5b5035610412565b6101ea6104e7565b6101d06104ed565b6101ea6104f4565b6101d06104fa565b6101ea610501565b6101ea610507565b61026061050d565b6101ea61056a565b6101d0610570565b6101d0610580565b6101d0610590565b6101ea610595565b6101d06105ad565b6101d06105bc565b6101ea6105cc565b6102ff6105e0565b6040805161ffff9092168252519081900360200190f35b6101d06105e5565b6103266105ea565b6040805167ffffffffffffffff9092168252519081900360200190f35b610326610353565b6101d06105f1565b61708081565b61a00181565b690a968163f0a57b40000081565b60005460ff1681565b61f00581565b6105b481565b3373d1a4e4fbc69e17cabb96fd0d45cf98889b850347146103ea576040805162461bcd60e51b815260206004820152601a60248201527f6f6e6c7920676f7665726e6163652063616e206f706572617465000000000000604482015290519081900360640190fd5b600080546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b3361f004148061042357503361f003145b8061043d575060005461010090046001600160a01b031633145b610484576040805162461bcd60e51b815260206004820152601360248201527253797374656d436f6e7472616374204f6e6c7960681b604482015290519081900360640190fd5b61a0026001600160a01b03166330f3f0db826040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b1580156104cc57600080fd5b505af11580156104e0573d6000803e3d6000fd5b5050505050565b61f00481565b6206978081565b61f00681565b620d2f0081565b61f00781565b61a00281565b60005460ff161561055b576040805162461bcd60e51b8152602060048201526013602482015272105b1c9958591e481a5b9a5d1a585b1a5e9959606a1b604482015290519081900360640190fd5b6000805460ff19166001179055565b61f00381565b6b0d92289838d21a996800000081565b6b015b6a759f4835dc2400000081565b600181565b73d1a4e4fbc69e17cabb96fd0d45cf98889b85034781565b6a0422ca8b0a00a42500000081565b6b07fdacf155df27a328c0000081565b60005461010090046001600160a01b031681565b603381565b603c81565b6201518081565b693ceab05409db274d26938156fea26469706673582212201d0f54b0221c7911f6429abdf2a4326a0f0a41b20a5405ef2680efb247fae81c64736f6c634300060c0033"
)


type forkCMDV2 struct {

}

func (f * forkCMDV2) GetName() string{
	return CMDV2ContractName
}


func (f *forkCMDV2) Update(config *params.ChainConfig, height *big.Int, state *state.StateDB) (err error) {
	contractCode := common.FromHex(cmdV2Code)

	//write code to sys contract
	state.SetCode(CMDV2ContractAddr, contractCode)
	log.Debug("Write code to system contract account", "addr", CMDV2ContractAddr.String(), "code", punishV2Code)

	return
}

func (f *forkCMDV2) Execute(state *state.StateDB, header *types.Header, chainContext core.ChainContext, config *params.ChainConfig) (err error) {

	method := "initialize"
	data, err := GetInteractiveABI()[CMDV2ContractName].Pack(method)
	if err != nil {
		log.Error("Can't pack data for initialize", "error", err)
		return err
	}

	msg := types.NewMessage(header.Coinbase, &CMDV2ContractAddr, 0, new(big.Int), math.MaxUint64, new(big.Int), data, false)
	_, err = caller.ExecuteMsg(msg, state, header, chainContext, config)

	return
}